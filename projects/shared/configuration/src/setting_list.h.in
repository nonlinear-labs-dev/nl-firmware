#pragma once

/******************************************************************************/
/** @file       setting_list.h
    @date       ${timestamp}
    @version    ${config.milestone}-${config.version}
    @author     M. Seeber
    @brief      complete list of settings (and their describable properties)
    @todo       
*******************************************************************************/

#include "parameter_declarations.h"
#include <nltools/Types.h>
#include <optional>
#include <variant>

namespace C15
{
    namespace Settings
    {
        enum SettingId : unsigned {
            ${setting_id}
        };

        struct SettingDescriptor
        {
            struct DisplayDescriptor
            {
                const Properties::DisplayScalingType m_display_scaling_type;
                const unsigned m_coarse;
                const unsigned m_fine;
            };
            struct RenderScaling
            {
                const Properties::SmootherScale m_scaleId;
                const float m_scaleFactor;
                const float m_scaleOffset;
            };
            static constexpr RenderScaling s_no_render_scaling = { Properties::SmootherScale::None, 0.0f, 0.0f };
            using ValueType = std::variant<
                float, const char * const,
                MidiReceiveChannel, MidiReceiveChannelSplit,
                MidiSendChannel, MidiSendChannelSplit,
                PedalCC, BenderCC, AftertouchCC, RibbonCC,
                BenderCurves, AftertouchCurves, VelocityCurves,
                PresetStoreModeSettings, BaseUnitUIModes, BaseUnitUIDetails,
                ParameterEditModeRibbonBehaviours, DebugLevels,
                PedalTypes, WifiSettings, SelectedRibbons, BooleanSettings
            >;
            const SettingId m_id;
            const char * const m_key;
            const std::optional<ValueType> m_default_value;
            const std::optional<DisplayDescriptor> m_display;
            const RenderScaling m_render_scaling;
            constexpr SettingDescriptor(
                const SettingId &_id, const char * const _key
            )   : m_id{ _id }
                , m_key{ _key }
                , m_default_value{ std::nullopt }
                , m_display{ std::nullopt }
                , m_render_scaling{ s_no_render_scaling }
            {}
            constexpr SettingDescriptor(
                const SettingId &_id, const char * const _key,
                const ValueType &_default_value
            )   : m_id{ _id }
                , m_key{ _key }
                , m_default_value{ _default_value }
                , m_display{ std::nullopt }
                , m_render_scaling{ s_no_render_scaling }
            {}
            constexpr SettingDescriptor(
                const SettingId &_id, const char * const _key,
                const ValueType &_default_value,
                const DisplayDescriptor &_display
            )   : m_id{ _id }
                , m_key{ _key }
                , m_default_value{ _default_value }
                , m_display{ _display }
                , m_render_scaling{ s_no_render_scaling }
            {}
            constexpr SettingDescriptor(
                const SettingId &_id, const char * const _key,
                const ValueType &_default_value,
                const DisplayDescriptor &_display,
                const RenderScaling &_render_scaling
            )   : m_id{ _id }
                , m_key{ _key }
                , m_default_value{ _default_value }
                , m_display{ _display }
                , m_render_scaling{ _render_scaling }
            {}
        };
    } // namespace C15::Settings
    constexpr Settings::SettingDescriptor SettingList[] = {
        ${setting_list}
    };
} // namespace C15
