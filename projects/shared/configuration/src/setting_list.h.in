#pragma once

/******************************************************************************/
/** @file       setting_list.h
    @date       ${timestamp}
    @version    ${config.milestone}-${config.version}
    @author     M. Seeber
    @brief      complete list of settings (and their describable properties)
    @todo       
*******************************************************************************/

#include "parameter_declarations.h"
#include <nltools/Types.h>
#include <optional>
#include <variant>

namespace C15
{
    namespace Settings
    {
        struct SettingDescriptor
        {
            using ValueType = std::variant<
                bool, float, MidiReceiveChannel
            >;
            const char * const m_key;
            const std::optional<ValueType> m_default_value;
            const std::optional<Properties::DisplayScalingType> m_display_scaling_type;
            constexpr SettingDescriptor(
                const char * const _key
            )   : m_key{ _key }
                , m_default_value{ std::nullopt }
                , m_display_scaling_type{ std::nullopt }
            {}
            constexpr SettingDescriptor(
                const char * const _key, const ValueType &_default_value
            )   : m_key{ _key }
                , m_default_value{ _default_value }
                , m_display_scaling_type{ std::nullopt }
            {}
            constexpr SettingDescriptor(
                const char * const _key, const ValueType &_default_value,
                const Properties::DisplayScalingType &_display_scaling_type
            )   : m_key{ _key }
                , m_default_value{ _default_value }
                , m_display_scaling_type{ _display_scaling_type }
            {}
        };
    } // namespace C15::Settings
    constexpr Settings::SettingDescriptor SettingList[] = {
        ${setting_list}
    };
} // namespace C15
