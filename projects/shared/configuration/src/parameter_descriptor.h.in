#pragma once

/******************************************************************************/
/** @file       parameter_descriptor.h
    @date       ${timestamp}
    @version    ${config.milestone}-${config.version}
    @author     M. Seeber
    @brief      provide a flexible descriptor structure for parameters/groups
    @todo       
*******************************************************************************/

#include <stdint.h>
#include "parameter_declarations.h"

namespace C15
{
    constexpr uint32_t None = 0;
    namespace Descriptors
    {
        struct TypeDescriptor
        {
            const ParameterType m_type;
            const uint32_t m_index;
            // constructors
            inline constexpr TypeDescriptor()
                : m_type(ParameterType::None)
                , m_index(None)
            {}
            inline constexpr TypeDescriptor(const uint32_t _param)
                : m_type(ParameterType::None)
                , m_index(_param)
            {}
            inline constexpr TypeDescriptor(const Parameters::Hardware_Sources _param)
                : m_type(ParameterType::Hardware_Source)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Hardware_Amounts _param)
                : m_type(ParameterType::Hardware_Amount)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Macro_Controls _param)
                : m_type(ParameterType::Macro_Control)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Macro_Times _param)
                : m_type(ParameterType::Macro_Time)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Global_Modulateables _param)
                : m_type(ParameterType::Global_Modulateable)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Global_Unmodulateables _param)
                : m_type(ParameterType::Global_Unmodulateable)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Local_Modulateables _param)
                : m_type(ParameterType::Local_Modulateable)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Local_Unmodulateables _param)
                : m_type(ParameterType::Local_Unmodulateable)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Polyphonic_Modulateables _param)
                : m_type(ParameterType::Polyphonic_Modulateable)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Polyphonic_Unmodulateables _param)
                : m_type(ParameterType::Polyphonic_Unmodulateable)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Monophonic_Modulateables _param)
                : m_type(ParameterType::Monophonic_Modulateable)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Monophonic_Unmodulateables _param)
                : m_type(ParameterType::Monophonic_Unmodulateable)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr TypeDescriptor(const Parameters::Display_Parameters _param)
                : m_type(ParameterType::Display_Parameter)
                , m_index(static_cast<uint32_t>(_param))
            {}
        };
        struct SmootherDescriptor
        {
            const SmootherSection m_section;
            const SmootherClock m_clock;
            const uint32_t m_index;
            // constructors
            inline constexpr SmootherDescriptor()
                : m_section(SmootherSection::None)
                , m_clock(SmootherClock::Sync)
                , m_index(None)
            {}
            inline constexpr SmootherDescriptor(const uint32_t _param)
                : m_section(SmootherSection::None)
                , m_clock(SmootherClock::Sync)
                , m_index(_param)
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Global_Sync _param)
                : m_section(SmootherSection::Global)
                , m_clock(SmootherClock::Sync)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Global_Audio _param)
                : m_section(SmootherSection::Global)
                , m_clock(SmootherClock::Audio)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Global_Fast _param)
                : m_section(SmootherSection::Global)
                , m_clock(SmootherClock::Fast)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Global_Slow _param)
                : m_section(SmootherSection::Global)
                , m_clock(SmootherClock::Slow)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Poly_Sync _param)
                : m_section(SmootherSection::Poly)
                , m_clock(SmootherClock::Sync)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Poly_Audio _param)
                : m_section(SmootherSection::Poly)
                , m_clock(SmootherClock::Audio)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Poly_Fast _param)
                : m_section(SmootherSection::Poly)
                , m_clock(SmootherClock::Fast)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Poly_Slow _param)
                : m_section(SmootherSection::Poly)
                , m_clock(SmootherClock::Slow)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Mono_Sync _param)
                : m_section(SmootherSection::Mono)
                , m_clock(SmootherClock::Sync)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Mono_Audio _param)
                : m_section(SmootherSection::Mono)
                , m_clock(SmootherClock::Audio)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Mono_Fast _param)
                : m_section(SmootherSection::Mono)
                , m_clock(SmootherClock::Fast)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SmootherDescriptor(const Smoothers::Mono_Slow _param)
                : m_section(SmootherSection::Mono)
                , m_clock(SmootherClock::Slow)
                , m_index(static_cast<uint32_t>(_param))
            {}
        };
        struct SignalDescriptor
        {
            const ParameterSignal m_signal;
            const uint32_t m_index;
            // constructors
            inline constexpr SignalDescriptor()
                : m_signal(ParameterSignal::None)
                , m_index(None)
            {}
            inline constexpr SignalDescriptor(const uint32_t _param)
                : m_signal(ParameterSignal::None)
                , m_index(_param)
            {}
            inline constexpr SignalDescriptor(const Signals::Global_Signals _param)
                : m_signal(ParameterSignal::Global_Signal)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SignalDescriptor(const Signals::Quasipoly_Signals _param)
                : m_signal(ParameterSignal::Quasipoly_Signal)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SignalDescriptor(const Signals::Truepoly_Signals _param)
                : m_signal(ParameterSignal::Truepoly_Signal)
                , m_index(static_cast<uint32_t>(_param))
            {}
            inline constexpr SignalDescriptor(const Signals::Mono_Signals _param)
                : m_signal(ParameterSignal::Mono_Signal)
                , m_index(static_cast<uint32_t>(_param))
            {}
        };
        // AE and PG Descriptors
        struct AudioEngineParamDescriptor
        {
            const SmootherDescriptor m_smoother;
            const SignalDescriptor m_signal;
            const Properties::SmootherScale m_scaleId = Properties::SmootherScale::None;
            const float m_scaleFactor = 0.0f;
            const float m_scaleOffset = 0.0f;
            const bool m_polarity = false;
        };
        struct PlaygroundParamDescriptor
        {
            const uint32_t m_coarse_cp = 0;
            const uint32_t m_fine_cp = 0;
            const uint32_t m_coarse_amt = 0;
            const uint32_t m_fine_amt = 0;
            const char * const m_inactive_cp = nullptr;
            const char * const m_param_label_long = nullptr;
            const char * const m_param_label_short = nullptr;
            const char * const m_param_info = nullptr;
            const Properties::DisplayScalingType m_cp_display_scaling_type = Properties::DisplayScalingType::None;
            const Properties::DisplayScalingType m_ma_display_scaling_type = Properties::DisplayScalingType::None;
        };
    }  // namespace C15::Descriptors
    struct ParameterGroupDescriptor
    {
        using RGB = uint8_t[3];
        const Descriptors::ParameterGroup m_group = Descriptors::ParameterGroup::None;
        const RGB m_color = {0, 0, 0};
        const char * const m_label_long = nullptr;
        const char * const m_label_short = nullptr;
        const bool m_global_group = false;
    };
    struct DisplayScalingTypeDescriptor
    {
        const Properties::DisplayScalingType m_type = Properties::DisplayScalingType::None;
        const Properties::ParameterRounding m_round = Properties::ParameterRounding::None;
        const Properties::ParameterUnit m_unit = Properties::ParameterUnit::None;
        const Properties::ParameterInfinity m_infinity = Properties::ParameterInfinity::None;
        const bool m_bipolar = false;
    };
    struct ParameterDescriptor
    {
        const Descriptors::TypeDescriptor m_param;
        const PID::ParameterID m_param_id = PID::None;
        const Descriptors::ParameterGroup m_group = Descriptors::ParameterGroup::None;
        const float m_initial = 0.0f;
        const Descriptors::AudioEngineParamDescriptor m_ae;
        const Descriptors::PlaygroundParamDescriptor m_pg;
    };
} // namespace C15
