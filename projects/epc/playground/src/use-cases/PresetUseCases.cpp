#include "PresetUseCases.h"
#include "StoreUseCaseHelper.h"
#include <presets/Preset.h>
#include <libundo/undo/Scope.h>
#include <nltools/Assert.h>
#include <presets/Bank.h>
#include <presets/PresetManager.h>
#include <parameter_declarations.h>
#include <presets/EditBuffer.h>
#include <parameters/SplitPointParameter.h>
#include <device-settings/Settings.h>
#include <device-settings/SplitPointSyncParameters.h>
#include <device-settings/SyncSplitSettingUseCases.h>

PresetUseCases::PresetUseCases(Preset& p, Settings& settings)
    : m_preset { p }
    , m_settings{ settings }
{
  if(auto bank = dynamic_cast<Bank*>(m_preset.getParent()))
  {
    m_bank = bank;
    m_presetManager = m_bank->getPresetManager();
    m_editBuffer = m_presetManager->getEditBuffer();
  }
}

void PresetUseCases::rename(const std::string& newName)
{
  if(m_preset.getName() != newName)
  {
    auto scope = m_preset.getUndoScope().startTransaction("Rename preset");
    m_preset.setName(scope->getTransaction(), newName);
  }
}

void PresetUseCases::setComment(const Glib::ustring& comment)
{
  if(m_preset.getComment() != comment)
  {
    auto scope = m_preset.getUndoScope().startTransaction("Set Preset Comment");
    m_preset.setAttribute(scope->getTransaction(), "Comment", comment);
  }
}

void PresetUseCases::setAttribute(const Glib::ustring& key, const Glib::ustring& value)
{
  auto scope = m_preset.getUndoScope().startTransaction("Set Preset attribute");
  auto transaction = scope->getTransaction();
  m_preset.setAttribute(transaction, key, value);
  m_preset.setAutoGeneratedAttributes(transaction);
}

void PresetUseCases::overwriteWithEditBuffer(EditBuffer& editBuffer)
{
  if(m_editBuffer == nullptr || m_presetManager == nullptr || m_bank == nullptr)
  {
    nltools_assertOnDevPC(false);
    return;
  }

  auto scope = m_preset.getUndoScope().startTransaction("Overwrite '%0' with Editbuffer", m_preset.getName());
  auto transaction = scope->getTransaction();
  m_preset.copyFrom(transaction, &editBuffer);
  m_editBuffer->undoableSetLoadedPresetInfo(transaction, &m_preset);
  m_presetManager->selectBank(transaction, m_bank->getUuid());
  m_bank->selectPreset(transaction, m_preset.getUuid());
  StoreUseCaseHelper::onStore(transaction, m_preset, *m_presetManager, m_settings);
  assert(m_presetManager->getSelectedBank() == m_bank);
  assert(m_bank->getSelectedPreset() == &m_preset);
}

void PresetUseCases::overwriteWithPreset(Preset* source)
{
  if(m_presetManager == nullptr || m_bank == nullptr)
  {
    nltools_assertOnDevPC(false);
    return;
  }

  auto scope = m_preset.getUndoScope().startTransaction("Overwrite preset '%0' with '%1'", m_preset.getName(),source->getName());
  auto transaction = scope->getTransaction();
  m_preset.copyFrom(transaction, source);
  m_bank->selectPreset(transaction, m_preset.getUuid());
  m_presetManager->selectBank(transaction, m_bank->getUuid());
  StoreUseCaseHelper::onStore(transaction, m_preset, *m_presetManager, m_settings);
  assert(m_presetManager->getSelectedBank() == m_bank);
  assert(m_bank->getSelectedPreset() == &m_preset);
}