<!doctype html>
<html>

<head>
  <link rel="shortcut icon" href="favicon.ico">
  <meta name="theme-color" content="#ffffff">
  <noscript>
    <meta http-equiv="refresh" content="0;url=index_noscript.html" />
  </noscript>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="viewport"
    content="initial-scale=1, user-scalable=no, maximum-scale=1, minimum-scale=1, target-densitydpi=device-dpi" />
  <title>C15 - Mirror OLEDs</title>
</head>

<body>
    <div id="oleds" style="width: 256px; height: 97px;">
        <svg viewBox="0 0 256 97">
            <foreignObject x="0" y="0" width="256" height="64">
                <canvas id="boled" width="256" height="64" style="image-rendering: pixelated;"></canvas>
            </foreignObject>
            <foreignObject x="64" y="65" width="128" height="32">
                <canvas id="soled" width="128" height="32" style="image-rendering: pixelated;"></canvas>
            </foreignObject>
        </svg>
    </div>
    <button id="zoomin" onclick="zoom(2)">+</button>
    <button id="zoomout" onclick="zoom(0.5)" disabled>-</button>
</body>

<script>
function zoom(z) {
  let oleds_div = document.getElementById("oleds");

  let old_w = oleds_div.clientWidth;
  let old_h = oleds_div.clientHeight;

  let new_w = Math.max(old_w * z, 256);
  let new_h = Math.max(old_h * z, 97);

  oleds_div.style.width = new_w + "px";
  oleds_div.style.height = new_h + "px";

  if(new_w == 256) {
    document.getElementById("zoomout").disabled = true;
  } else {
    document.getElementById("zoomout").disabled = false;
  }
}

function showOleds() {
    const hostName = location.hostname.length == 0 ? "localhost" : location.hostname;
    var refreshTimer = null;
    var socket = null;
  
    function open() {
      if (socket) {
        socket.close();
        socket = null;
      }
  
      var map = new Map();
      map.set(0x10, [0, 0, 0, 255]);
      map.set(0x00, [0, 0, 0, 255]);
      map.set(0x02, [73, 73, 73, 255]);
      map.set(0x05, [110, 110, 110, 255]);
      map.set(0x06, [146, 146, 146, 255]);
      map.set(0x0A, [183, 183, 183, 255]);
      map.set(0x0B, [219, 219, 219, 255]);
      map.set(0x0F, [255, 255, 255, 255]);
  
      var soledMap = new Map();
      soledMap.set(0x10, [0, 0, 0, 255]);
      soledMap.set(0x00, [0, 0, 0, 255]);
      soledMap.set(0x02, [255, 255, 255, 255]);
      soledMap.set(0x05, [255, 255, 255, 255]);
      soledMap.set(0x06, [255, 255, 255, 255]);
      soledMap.set(0x0A, [255, 255, 255, 255]);
      soledMap.set(0x0B, [255, 255, 255, 255]);
      soledMap.set(0x0F, [255, 255, 255, 255]);
  
      socket = new WebSocket("ws://" + hostName + ":" + @PLAYGROUND_OLED_WEBSOCKET_PORT@);
      socket.onopen = (event) => { socket.send("{}"); };
      socket.onerror = (event) => { refresh(); };
      socket.onclose = (event) => { };
      socket.onmessage = (event) => {
        var reader = new FileReader()
        reader.onload = () => {
          var oledsRaw = JSON.parse(reader.result);
  
          var boledArraySize = 256 * 64;
          var soledArraySize = 256 * 32;
  
          var boledsPix = new Uint8ClampedArray(boledArraySize * 4);
          var soledPix = new Uint8ClampedArray(soledArraySize * 4);
  
          for(var i = 0; i < boledArraySize; i++) {
            var idx = i * 4;
            var mapped = map.get(oledsRaw[i]);
            boledsPix[idx + 0] = mapped[0];
            boledsPix[idx + 1] = mapped[1];
            boledsPix[idx + 2] = mapped[2];
            boledsPix[idx + 3] = mapped[3];
          }
  
          for(var i = 0; i < soledArraySize; i++) {
            var idx = i * 4;
            var offset = boledArraySize;
            var mapped = soledMap.get(oledsRaw[offset + i]);
            soledPix[idx + 0] = mapped[0];
            soledPix[idx + 1] = mapped[1];
            soledPix[idx + 2] = mapped[2];
            soledPix[idx + 3] = mapped[3];
          }
  
          drawBoled(boledsPix);
          drawSoled(soledPix);
        }
        reader.readAsText(event.data);
      };
  
  
    }
  
    function refresh() {
      if (!refreshTimer) {
        refreshTimer = setTimeout(() => {
          refreshTimer = null;
          open();
        }, 2000);
      }
    }
  
    function drawBoled(pix) {
      var canvas = document.getElementById("boled");
      var ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      var id = new ImageData(pix, canvas.width, canvas.height);
      ctx.putImageData(id, 0, 0);
    }
  
    function drawSoled(pix) {
      var soled = new Uint8ClampedArray(128 * 32 * 4);
  
      for (var y = 0; y < 32; y++) {
        for (var x = 0; x < 128; x++) {
          var tgtIdx = 4 * (x + y * 128);
          var srcIdx = 4 * (x + y * 256);
          soled[tgtIdx + 0] = pix[srcIdx + 0];
          soled[tgtIdx + 1] = pix[srcIdx + 1];
          soled[tgtIdx + 2] = pix[srcIdx + 2];
          soled[tgtIdx + 3] = pix[srcIdx + 3];
        }
      }
  
      var canvas = document.getElementById("soled");
      var ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      var id = new ImageData(soled, canvas.width, canvas.height);
      ctx.putImageData(id, 0, 0);
    }
  
    this.start = function () {
      open();
      document.getElementById("soled").style.visibility = "visible";
      document.getElementById("boled").style.visibility = "visible";
    }
  
    this.stop = function () {
      document.getElementById("soled").style.visibility = "hidden";
      document.getElementById("boled").style.visibility = "hidden";
  
      if (refreshTimer)
        refreshTimer.cancel();
  
      if (socket)
        socket.close();
  
      refreshTimer = null;
      socket = null;
    }

    return this;
  }

  let js = showOleds();
  js.start();
</script>

</html>